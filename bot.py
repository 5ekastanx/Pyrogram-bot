import logging
from for_email import send_email
from pyrogram import Client, filters
from keyboards import get_confirmation_keyboards, get_menu_keyboards
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO)


app = Client(
    'YOUR BOT',
    bot_token='YOUR BOT TOKEN',
    api_id= 'YOUR API ID',
    api_hash='YOUR API HASH'
)


# –ü–∏—à–µ–º –°–æ—Å—Ç–æ—è–Ω–∏–µ State
STATE_WAITING_FOR_TITLE = "waiting_for_title"
STATE_CONFIRMING_TITLE = "confirming_title"
STATE_WAITING_FOR_MESSAGE = "waiting_for_message"
STATE_CONFIRMING_MESSAGE = "confirming_message"
STATE_WAITING_FOR_EMAIL = "waiting_for_email"
STATE_CONFIRMING_EMAIL = "confirming_email"

user_data = {}
user_settings = {}
user_states = {}


@app.on_message(filters.command("start") & filters.private)
async def start(client: Client, message: Message):
    chat_id = message.chat.id
    user_settings[chat_id] = {'notifications': True, 'language': '–†—É—Å—Å–∫–∏–π'}

    await message.reply(
        "üëã–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö.\n"
        "üåü–ê–≤—Ç–æ—Ä—ã:\n"
        "- TG: [5ekastan](https://t.me/beka_stan)\n"
        "üö´–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è,\n"
        "–Ω–æ –º—ã –º–æ–∂–µ–º –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!",
        reply_markup=get_menu_keyboards()
    )

    

####################    –ù–ê–°–¢–†–û–ô–ö–ê       ########################
                                                            ####
@app.on_callback_query(filters.regex("settings"))             ###
async def settings_menu(client: Client, callback_query):       #############################
    settings_keyboard = InlineKeyboardMarkup([                                            ##
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],   ##
        [InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data="change_language")],               ##
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="update_profile")]     ##
    ])                                                                  
                                                                        
    await callback_query.message.edit_text(                             
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", 
        reply_markup=settings_keyboard,                  
        one_time_keyboard=True,                          
        parse_mode="Markdown"                            
    )                                                    
                                                         
@app.on_callback_query(filters.regex("toggle_notifications|change_language|update_profile")) 
async def settings_callback(client: Client, callback_query):                            
    chat_id = callback_query.message.chat.id                                 
    data = callback_query.data                       
                                                    
    if chat_id not in user_settings:                 
        user_settings[chat_id] = {'notifications': True, 'language': '–†—É—Å—Å–∫–∏–π'}
                                                                               
    if data == "toggle_notifications":                                         
        current_status = user_settings[chat_id].get('notifications', True)                                                              
        user_settings[chat_id]['notifications'] = not current_status                                                                    
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if user_settings[chat_id]['notifications'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"                                                 
        await callback_query.message.edit_text(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å {status}.", reply_markup=callback_query.message.reply_markup)   

    elif data == "change_language":
        current_language = user_settings[chat_id].get('language', '–†—É—Å—Å–∫–∏–π')
        new_language = 'English' if current_language == '–†—É—Å—Å–∫–∏–π' else '–†—É—Å—Å–∫–∏–π'
        user_settings[chat_id]['language'] = new_language
        await callback_query.message.edit_text(f"üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_language}.", reply_markup=callback_query.message.reply_markup)

    elif data == "update_profile":
        await callback_query.message.edit_text(
            "üîÑ –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "- –ò–º—è: /setname\n"
            "- –í–æ–∑—Ä–∞—Å—Ç: /setage\n"
            "- –ì–æ—Ä–æ–¥: /setcity",
            reply_markup=callback_query.message.reply_markup
        )

@app.on_message(filters.command("setname") & filters.private)
async def setname(client: Client, message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/setname –ò–≤–∞–Ω`")
        return
    name = args[1]
    user_data[message.chat.id] = {'name': name}
    await message.reply(f"–í–∞—à–µ –∏–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {name}")

@app.on_message(filters.command("setage") & filters.private)
async def setage(client: Client, message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2 or not args[1].isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/setage 25`")
        return
    age = int(args[1])
    user_data[message.chat.id] = user_data.get(message.chat.id, {})
    user_data[message.chat.id]['age'] = age
    await message.reply(f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {age}")

@app.on_message(filters.command("setcity") & filters.private)
async def setcity(client: Client, message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:                                                                                   ##
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/setcity –ú–æ—Å–∫–≤–∞`")     ##
        return                                                                                          ##
    city = args[1]                                                      ##################################
    user_data[message.chat.id] = user_data.get(message.chat.id, {})    ###
    user_data[message.chat.id]['city'] = city                         ###
    await message.reply(f"–í–∞—à –≥–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {city}")     ##########
                                                              ##
####################    –ù–ê–°–¢–†–û–ô–ö–ê       ########################


@app.on_message(filters.command("help") & filters.private)
async def help_command(client: Client, message: Message):
    help_text = (
        "üÜò *–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?*\n\n"
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
        "/reset - –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏\n\n"
        "*–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:*\n"
        "üìÑ *–ü—Ä–æ—Ñ–∏–ª—å* - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è (ID, –ò–º—è, –§–∞–º–∏–ª–∏—è)\n"
        "üìß *–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É* - –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –ø–æ—á—Ç–µ\n"
        "üìã *–ö–æ–º–∞–Ω–¥—ã* - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º\n"
        "üîç *–ü–æ–∏—Å–∫* - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–∫–æ–º–∞–Ω–¥–∞ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞)\n"
        "üì∑ *–ò–Ω—Å—Ç–∞–≥—Ä–∞–º* - –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –ò–Ω—Å—Ç–∞–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç\n"
        "üÜò *–ü–æ–º–æ—â—å* - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π\n"
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É\n\n"
        "üåü –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!"
    )
    await message.reply(help_text)
    

@app.on_message(filters.command("reset") & filters.private)
async def reset(client: Client, message: Message):
    chat_id = message.chat.id
    user_data.pop(chat_id, None)
    user_settings.pop(chat_id, None)
    user_states.pop(chat_id, None)
    await message.reply("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –±—ã–ª —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π /start")


@app.on_message(filters.text & filters.private)
async def profile(client: Client, message: Message):
    chat_id = message.chat.id
    
    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        await message.reply(f"üë§ –≠—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nID: {message.from_user.id}\n–ò–º—è: {message.from_user.first_name}\n–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}")

    elif message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É":
        await message.reply("üìß –ü–æ—á—Ç–∞ 5ekastan\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞.") 
        user_states[chat_id] = STATE_WAITING_FOR_TITLE

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–º—ã –ø–∏—Å—å–º–∞
    elif user_states.get(chat_id) == STATE_WAITING_FOR_TITLE:
        user_states[f"{chat_id}_title"] = message.text  
        await message.reply("–í—Å–µ –≤–µ—Ä–Ω–æ?",message.text, reply_markup=get_confirmation_keyboards())
        user_states[chat_id] = STATE_CONFIRMING_TITLE

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–º—ã –ø–∏—Å—å–º–∞
    elif user_states.get(chat_id) == STATE_CONFIRMING_TITLE:
        if message.text == "–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ":
            await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞.")
            user_states[chat_id] = STATE_WAITING_FOR_MESSAGE
        elif message.text == "–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –ø–∏—Å—å–º–∞.")
            user_states[chat_id] = STATE_WAITING_FOR_TITLE
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup=get_confirmation_keyboards())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞
    elif user_states.get(chat_id) == STATE_WAITING_FOR_MESSAGE:
        user_states[f"{chat_id}_message"] = message.text  
        await message.reply("–í—Å–µ –≤–µ—Ä–Ω–æ?",message.text, reply_markup=get_confirmation_keyboards())
        user_states[chat_id] = STATE_CONFIRMING_MESSAGE

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞
    elif user_states.get(chat_id) == STATE_CONFIRMING_MESSAGE:
        if message.text == "–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ":
            await message.reply("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
            user_states[chat_id] = STATE_WAITING_FOR_EMAIL
        elif message.text == "–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞.")
            user_states[chat_id] = STATE_WAITING_FOR_MESSAGE
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup=get_confirmation_keyboards())
            
    elif user_states.get(chat_id) == STATE_WAITING_FOR_EMAIL:
        user_states[f"{chat_id}_email"] = message.text 
        title = user_states.get(f"{chat_id}_title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        message_text = user_states.get(f"{chat_id}_message", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        email = message.text
        await message.reply(
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {email}\n–¢–µ–º–∞: {title}\n–¢–µ–∫—Å—Ç: {message_text}\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=get_confirmation_keyboards()
        )
        user_states[chat_id] = STATE_CONFIRMING_EMAIL

    elif user_states.get(chat_id) == STATE_CONFIRMING_EMAIL:
            if message.text == "–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ":
                await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                email = user_states.get(f"{chat_id}_email")
                title = user_states.get(f"{chat_id}_title")
                message_text = user_states.get(f"{chat_id}_message")
                try:
                    send_email(email, title, message_text, image_path="./bekastan.png")
                    await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=get_menu_keyboards())
                    user_states.pop(chat_id, None)
                except Exception as e:
                    await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", reply_markup=get_menu_keyboards())
                    user_states.pop(chat_id, None)
            elif message.text == "–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
                user_states[chat_id] = STATE_WAITING_FOR_EMAIL
            else:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup=get_confirmation_keyboards())



    elif message.text == "–ö–æ–º–∞–Ω–¥—ã":
        await message.reply("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/reset - –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n/help - –ü–æ–º–æ—â—å\n")

    elif message.text == "–ü–æ–∏—Å–∫":
        await message.reply("–ù–µ –ø–æ–Ω—è–ª —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–ª—è —ç—Ç–æ –∫–æ–º–∞–Ω–¥—ã.")

    elif message.text == "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º":
        await message.reply("üì∑ –ù–∞—à –ò–Ω—Å—Ç–∞–≥—Ä–∞–º: [5ekastan](https://instagram.com/5ekastan)", disable_web_page_preview=True)

    elif message.text == "–ü–æ–º–æ—â—å":
        await message.reply("üÜò –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ –ø–æ—á—Ç–µ.")

    elif message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        settings_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
            [InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data="change_language")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="update_profile")]
        ])
        
        await message.reply(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=settings_keyboard,
        )
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.", reply_markup=get_menu_keyboards())


app.run()